import os
import uuid
import datetime
import logging 

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, ContextTypes,
    ConversationHandler,
    CallbackQueryHandler 
)
from pymongo import MongoClient
from flask import Flask
import threading

# --- ‡§≤‡•â‡§ó‡§ø‡§Ç‡§ó ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞‡•á‡§∂‡§® ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- Configuration ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
PUBLIC_CHANNEL_USERNAME = os.getenv("PUBLIC_CHANNEL_USERNAME")
PUBLIC_CHANNEL_ID = int(os.getenv("PUBLIC_CHANNEL_ID")) 

EXTERNAL_API_BASE_URL = os.getenv("EXTERNAL_API_BASE_URL") 

UPDATES_CHANNEL_LINK = "https://t.me/asbhai_bsr" 

# MongoDB Configuration
MONGO_URI = os.getenv("MONGO_URI")
client = MongoClient(MONGO_URI)
db = client.file_bot 
files_collection = db.files 
batch_files_in_progress = {} 

# --- Conversation States for Batch Command ---
SENDING_BATCH_FILES = 1

# --- Flask App for Health Check ---
flask_app = Flask(__name__)

@flask_app.route('/health')
def health_check():
    return "Bot is healthy!", 200

def run_flask_app():
    port = int(os.getenv("PORT", 8000))
    flask_app.run(host='0.0.0.0', port=port)
    logger.info(f"Flask health check server running on port {port}")

# --- Bot Handlers ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info(f"Received /start command from {update.effective_user.id}")
    args = context.args 

    if args:
        param = args[0]
        if param.startswith("download_"):
            original_token = param[len("download_"):]
            logger.info(f"Download deep link received for token: {original_token}")
            
            file_data = files_collection.find_one({"token": original_token})

            if file_data:
                upload_time = file_data.get("upload_time")
                # 5 ‡§Æ‡§ø‡§®‡§ü (300 ‡§∏‡•á‡§ï‡§Ç‡§°) ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§≤‡§ø‡§Ç‡§ï ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç
                if upload_time and (datetime.datetime.now() - upload_time).total_seconds() > 300: 
                    await update.message.reply_text(
                        "‡§Ø‡§π ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§≤‡§ø‡§Ç‡§ï ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§π‡•ã ‡§ó‡§à ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§®‡§à ‡§≤‡§ø‡§Ç‡§ï ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡•ã ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç‡•§"
                    )
                    files_collection.delete_one({"token": original_token}) # MongoDB ‡§∏‡•á ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§≤‡§ø‡§Ç‡§ï ‡§π‡§ü‡§æ‡§è‡§Å
                    logger.info(f"Expired token {original_token} deleted from DB.")
                    return

                # ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡•á‡§µ‡§≤ ‡§â‡§∏‡•Ä ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§Æ‡§ø‡§≤‡•á ‡§ú‡§ø‡§∏‡§®‡•á ‡§á‡§∏‡•á ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§ø‡§Ø‡§æ ‡§π‡•à
                if update.effective_chat.id != file_data.get("user_chat_id"):
                    await update.message.reply_text("‡§Ø‡§π ‡§´‡§º‡§æ‡§á‡§≤ ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§Ø‡§æ ‡§≤‡§ø‡§Ç‡§ï ‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§π‡•à‡•§")
                    logger.warning(f"Unauthorized download attempt for token {original_token} by user {update.effective_chat.id}")
                    return

                telegram_file_id = file_data["telegram_file_id"]
                original_filename = file_data["original_filename"]
                try:
                    if file_data.get("file_type") == "video": 
                        await update.message.reply_video(
                            video=telegram_file_id,
                            caption=f"‡§Ø‡§π‡§æ‡§Å ‡§Ü‡§™‡§ï‡•Ä ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§π‡•à: {original_filename}",
                            filename=original_filename # ‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡•ã ‡§â‡§∏‡§ï‡•á ‡§Æ‡•Ç‡§≤ ‡§®‡§æ‡§Æ ‡§∏‡•á ‡§≠‡•á‡§ú‡•á‡§Ç
                        )
                        logger.info(f"Video {original_filename} sent to user {update.effective_user.id}")
                    else: # assume it's a document
                        await update.message.reply_document(
                            document=telegram_file_id,
                            caption=f"‡§Ø‡§π‡§æ‡§Å ‡§Ü‡§™‡§ï‡•Ä ‡§´‡§º‡§æ‡§á‡§≤ ‡§π‡•à: {original_filename}",
                            filename=original_filename # ‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡•ã ‡§â‡§∏‡§ï‡•á ‡§Æ‡•Ç‡§≤ ‡§®‡§æ‡§Æ ‡§∏‡•á ‡§≠‡•á‡§ú‡•á‡§Ç
                        )
                        logger.info(f"Document {original_filename} sent to user {update.effective_user.id}")
                    # files_collection.delete_one({"token": original_token}) # ‡§Ø‡§¶‡§ø ‡§è‡§ï ‡§¨‡§æ‡§∞ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§π‡§ü‡§æ‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç
                except Exception as e:
                    logger.error(f"Error sending file {original_filename} to user {update.effective_user.id}: {e}")
                    await update.message.reply_text(f"‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§´‡§º‡§æ‡§á‡§≤ ‡§®‡§π‡•Ä‡§Ç ‡§≠‡•á‡§ú‡•Ä ‡§ú‡§æ ‡§∏‡§ï‡•Ä‡•§ ‡§è‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à: {e}")
            else:
                logger.warning(f"Invalid or expired token {original_token} requested by user {update.effective_user.id}")
                await update.message.reply_text("‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§Ø‡§æ ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§è‡§ï ‡§®‡§à ‡§´‡§º‡§æ‡§á‡§≤ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç‡•§")
        else:
            await send_welcome_message(update, context) 
    else:
        await send_welcome_message(update, context)

async def send_welcome_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("Sending welcome message.")
    keyboard = [
        [InlineKeyboardButton("Updates Channel", url=UPDATES_CHANNEL_LINK)],
        [InlineKeyboardButton("Help", callback_data="help_command")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # ‡§ú‡§æ‡§Å‡§ö ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§ï‡•ç‡§Ø‡§æ ‡§Ö‡§™‡§°‡•á‡§ü ‡§è‡§ï ‡§Æ‡•à‡§∏‡•á‡§ú ‡§π‡•à ‡§Ø‡§æ ‡§ï‡•â‡§≤‡§¨‡•à‡§ï ‡§ï‡•ç‡§µ‡•á‡§∞‡•Ä
    if update.message:
        await update.message.reply_text(
            "üëã ‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§´‡§º‡§æ‡§á‡§≤ ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§¨‡•â‡§ü ‡§π‡•Ç‡§Å‡•§ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§´‡§º‡§æ‡§á‡§≤‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡§®‡•á ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§≤‡§ø‡§Ç‡§ï ‡§¨‡§®‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å‡•§",
            reply_markup=reply_markup
        )
    elif update.callback_query:
        # ‡§ï‡•â‡§≤‡§¨‡•à‡§ï ‡§ï‡•ç‡§µ‡•á‡§∞‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§Æ‡•Ç‡§≤ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§ï‡•ã ‡§∏‡§Ç‡§™‡§æ‡§¶‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç
        await update.callback_query.message.edit_text(
            "üëã ‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§´‡§º‡§æ‡§á‡§≤ ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§¨‡•â‡§ü ‡§π‡•Ç‡§Å‡•§ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§´‡§º‡§æ‡§á‡§≤‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡§®‡•á ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§≤‡§ø‡§Ç‡§ï ‡§¨‡§®‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å‡•§",
            reply_markup=reply_markup
        )
    logger.info("Welcome message sent.")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("Help command received.")
    help_text = (
        "‡§Ø‡§π‡§æ‡§Å ‡§µ‡•á ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§¶‡§ø‡§è ‡§ó‡§è ‡§π‡•à‡§Ç ‡§ú‡§ø‡§®‡§ï‡§æ ‡§Ü‡§™ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç:\n\n"
        "‚û°Ô∏è /start - ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§\n"
        "‚û°Ô∏è /link - ‡§è‡§ï ‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡§®‡•á ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§≤‡§ø‡§Ç‡§ï ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§\n"
        "‚û°Ô∏è /batch - ‡§è‡§ï ‡§∏‡§æ‡§• ‡§ï‡§à ‡§´‡§º‡§æ‡§á‡§≤‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§≤‡§ø‡§Ç‡§ï ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§\n\n"
        "‡§ï‡§Æ‡§æ‡§Ç‡§° /link ‡§Ø‡§æ /batch ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§Æ‡•Å‡§ù‡•á ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§°‡•â‡§ï‡•ç‡§Ø‡•Ç‡§Æ‡•á‡§Ç‡§ü ‡§Ø‡§æ ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§≠‡•á‡§ú‡•á‡§Ç‡•§"
    )
    
    if update.callback_query:
        await update.callback_query.answer() # ‡§ï‡•â‡§≤‡§¨‡•à‡§ï ‡§ï‡•ç‡§µ‡•á‡§∞‡•Ä ‡§ï‡•ã ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç
        chat_id = update.callback_query.message.chat_id
        message_id = update.callback_query.message.message_id
        
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=help_text,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‡§™‡•Ä‡§õ‡•á", callback_data="back_to_welcome")]])
        )
        logger.info("Help message sent via callback edit.")
    else: # ‡§Ø‡§¶‡§ø ‡§Ø‡§π ‡§∏‡•Ä‡§ß‡•á /help ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§Ü‡§Ø‡§æ ‡§π‡•à
        await update.message.reply_text(help_text)
        logger.info("Help message sent via direct command.")

async def back_to_welcome(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("Back to welcome button pressed.")
    await update.callback_query.answer() # ‡§ï‡•â‡§≤‡§¨‡•à‡§ï ‡§ï‡•ç‡§µ‡•á‡§∞‡•Ä ‡§ï‡•ã ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç
    await send_welcome_message(update, context) # welcome message will use edit_text due to update.callback_query

# --- Single File Link Generation ---
async def link_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info(f"/link command received from {update.effective_user.id}")
    user_id = update.effective_user.id
    # ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§≤‡§Ç‡§¨‡§ø‡§§ ‡§¨‡•à‡§ö ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§∏‡§æ‡§´‡§º ‡§π‡•ã
    if user_id in batch_files_in_progress:
        del batch_files_in_progress[user_id]
        logger.info(f"Cleared pending batch for user {user_id} when /link was used.")
    context.user_data['current_mode'] = 'single_file'
    await update.message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡•Å‡§ù‡•á ‡§µ‡§π ‡§´‡§º‡§æ‡§á‡§≤ (‡§°‡•â‡§ï‡•ç‡§Ø‡•Ç‡§Æ‡•á‡§Ç‡§ü ‡§Ø‡§æ ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã) ‡§≠‡•á‡§ú‡•á‡§Ç ‡§ú‡§ø‡§∏‡§ï‡•Ä ‡§Ü‡§™ ‡§≤‡§ø‡§Ç‡§ï ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§")

# --- Batch File Link Generation ---
async def batch_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info(f"/batch command received from {update.effective_user.id}")
    user_id = update.effective_user.id
    
    # ‡§Ø‡§¶‡§ø ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§ï‡•ã‡§à ‡§¨‡•à‡§ö ‡§ö‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à, ‡§§‡•ã ‡§â‡§∏‡•á ‡§∞‡•Ä‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
    if user_id in batch_files_in_progress:
        logger.info(f"Existing batch for user {user_id} found, resetting.")
        batch_files_in_progress[user_id] = []
    else:
        batch_files_in_progress[user_id] = [] # ‡§¨‡•à‡§ö ‡§´‡§º‡§æ‡§á‡§≤‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•Ç‡§ö‡•Ä ‡§ï‡•ã ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º ‡§ï‡§∞‡•á‡§Ç

    context.user_data['current_mode'] = 'batch_file'

    keyboard = [[InlineKeyboardButton("‡§≤‡§ø‡§Ç‡§ï ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç", callback_data="generate_batch_links")]]
    # ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§¨‡§ü‡§® ‡§ú‡•ã‡§°‡§º‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§´‡§Ç‡§∏‡•á‡§Ç ‡§®‡§π‡•Ä‡§Ç
    keyboard.append([InlineKeyboardButton("‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç", callback_data="cancel_batch_generation")]) 
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "‡§†‡•Ä‡§ï ‡§π‡•à, ‡§Æ‡•Å‡§ù‡•á ‡§è‡§ï-‡§è‡§ï ‡§ï‡§∞‡§ï‡•á ‡§´‡§º‡§æ‡§á‡§≤‡•á‡§Ç (‡§°‡•â‡§ï‡•ç‡§Ø‡•Ç‡§Æ‡•á‡§Ç‡§ü ‡§Ø‡§æ ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã) ‡§≠‡•á‡§ú‡•á‡§Ç‡•§ "
        "‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§´‡§º‡§æ‡§á‡§≤ ‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•ã ‡§∏‡•Ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•Ç‡§Å‡§ó‡§æ‡•§\n\n"
        "‡§ú‡§¨ ‡§Ü‡§™ ‡§∏‡§≠‡•Ä ‡§´‡§º‡§æ‡§á‡§≤‡•á‡§Ç ‡§≠‡•á‡§ú ‡§¶‡•á‡§Ç, ‡§§‡•ã '‡§≤‡§ø‡§Ç‡§ï ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç' ‡§¨‡§ü‡§® ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§Ø‡§¶‡§ø ‡§Ü‡§™ ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç ‡§§‡•ã '‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç' ‡§¶‡§¨‡§æ‡§è‡§Ç‡•§",
        reply_markup=reply_markup
    )
    return SENDING_BATCH_FILES # ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§ï‡•ã ‡§á‡§∏ ‡§∏‡•ç‡§ü‡•á‡§ü ‡§Æ‡•á‡§Ç ‡§∞‡§ñ‡•á‡§Ç

async def handle_batch_file_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    logger.info(f"Batch file received from {user_id}")
    if user_id not in batch_files_in_progress:
        logger.warning(f"File received for batch from {user_id} but no batch started. Falling back to single file.")
        # ‡§Ø‡§¶‡§ø ‡§ï‡•ã‡§à ‡§¨‡•à‡§ö ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§™‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã ‡§á‡§∏‡•á ‡§∏‡§ø‡§Ç‡§ó‡§≤ ‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡•á‡§Ç
        return await handle_file(update, context) 

    file = None
    file_type = ""
    if update.message.document:
        file = update.message.document
        file_type = "document"
    elif update.message.video:
        file = update.message.video
        file_type = "video"
    else:
        logger.info(f"Unsupported file type received from {user_id} during batch.")
        await update.message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§°‡•â‡§ï‡•ç‡§Ø‡•Ç‡§Æ‡•á‡§Ç‡§ü ‡§Ø‡§æ ‡§è‡§ï ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§≠‡•á‡§ú‡•á‡§Ç‡•§ ‡§Ö‡§®‡•ç‡§Ø ‡§´‡§º‡§æ‡§á‡§≤ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§¨‡•à‡§ö ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§Æ‡§∞‡•ç‡§•‡§ø‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç‡•§")
        return # unsupported file type, stay in conversation

    original_filename = file.file_name if file.file_name else f"unnamed_{file_type}"
    user_chat_id = update.message.chat_id

    try:
        # ‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡•ã ‡§∏‡§æ‡§∞‡•ç‡§µ‡§ú‡§®‡§ø‡§ï ‡§ö‡•à‡§®‡§≤ ‡§™‡§∞ ‡§´‡•â‡§∞‡§µ‡§∞‡•ç‡§° ‡§ï‡§∞‡•á‡§Ç
        sent_message = await context.bot.forward_message(
            chat_id=PUBLIC_CHANNEL_ID,
            from_chat_id=user_chat_id,
            message_id=update.message.message_id
        )
        permanent_telegram_file_id = None
        if sent_message.document:
            permanent_telegram_file_id = sent_message.document.file_id
        elif sent_message.video:
            permanent_telegram_file_id = sent_message.video.file_id
        
        if not permanent_telegram_file_id:
            logger.error(f"Failed to get file ID from forwarded message for file {original_filename}")
            await update.message.reply_text("‡§´‡§º‡•â‡§∞‡§µ‡§∞‡•ç‡§°‡•á‡§° ‡§Æ‡•à‡§∏‡•á‡§ú ‡§∏‡•á ‡§´‡§º‡§æ‡§á‡§≤ ID ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤‡•§")
            return # stay in conversation

    except Exception as e:
        logger.error(f"Error forwarding file {original_filename} to storage channel: {e}")
        await update.message.reply_text(f"‡§∏‡•ç‡§ü‡•ã‡§∞‡•á‡§ú ‡§ö‡•à‡§®‡§≤ ‡§™‡§∞ ‡§´‡§º‡§æ‡§á‡§≤ ‡§´‡§º‡•â‡§∞‡§µ‡§∞‡•ç‡§° ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {e}")
        return # stay in conversation

    unique_token = str(uuid.uuid4())

    file_info = {
        "token": unique_token,
        "telegram_file_id": permanent_telegram_file_id,
        "original_filename": original_filename,
        "user_chat_id": user_chat_id,
        "upload_time": datetime.datetime.now(),
        "file_type": file_type
    }
    files_collection.insert_one(file_info)
    logger.info(f"File {original_filename} (token: {unique_token}) saved to MongoDB.")

    batch_files_in_progress[user_id].append(unique_token)

    keyboard = [[InlineKeyboardButton("‡§≤‡§ø‡§Ç‡§ï ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç", callback_data="generate_batch_links")]]
    keyboard.append([InlineKeyboardButton("‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç", callback_data="cancel_batch_generation")]) # ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç ‡§¨‡§ü‡§®
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "‡§´‡§º‡§æ‡§á‡§≤ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§π‡•Å‡§à! ‡§Ö‡§ß‡§ø‡§ï ‡§´‡§º‡§æ‡§á‡§≤‡•á‡§Ç ‡§≠‡•á‡§ú‡•á‡§Ç ‡§Ø‡§æ ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è '‡§≤‡§ø‡§Ç‡§ï ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç' ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§",
        reply_markup=reply_markup
    )
    return SENDING_BATCH_FILES # ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§ï‡•ã ‡§á‡§∏‡•Ä ‡§∏‡•ç‡§ü‡•á‡§ü ‡§Æ‡•á‡§Ç ‡§∞‡§ñ‡•á‡§Ç


# MarkdownV2 ‡§∏‡•ç‡§™‡•á‡§∂‡§≤ ‡§ï‡•à‡§∞‡•á‡§ï‡•ç‡§ü‡§∞ ‡§ï‡•ã ‡§è‡§∏‡•ç‡§ï‡•á‡§™ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§®
def escape_markdown_v2(text: str) -> str:
    # ‡§ï‡•á‡§µ‡§≤ ‡§µ‡•á ‡§ï‡•à‡§∞‡•á‡§ï‡•ç‡§ü‡§∞ ‡§è‡§∏‡•ç‡§ï‡•á‡§™ ‡§ï‡§∞‡•á‡§Ç ‡§ú‡•ã MarkdownV2 ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§Ö‡§∞‡•ç‡§• ‡§∞‡§ñ‡§§‡•á ‡§π‡•à‡§Ç
    # ‡§î‡§∞ ‡§ú‡•ã ‡§Ü‡§™‡§ï‡•á literal text ‡§Æ‡•á‡§Ç ‡§Ü ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
    # URL ‡§ï‡•á ‡§Ö‡§Ç‡§¶‡§∞ ‡§ï‡•á ‡§ï‡•à‡§∞‡•á‡§ï‡•ç‡§ü‡§∞ ‡§ï‡•ã ‡§è‡§∏‡•ç‡§ï‡•á‡§™ ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§§‡•Ä,
    # ‡§ï‡•á‡§µ‡§≤ ‡§°‡§ø‡§∏‡•ç‡§™‡•ç‡§≤‡•á ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§Æ‡•á‡§Ç‡•§
    escape_chars = r'_*[]()~`>#+-=|{}.!' 
    return ''.join(['\\' + char if char in escape_chars else char for char in text])


async def generate_batch_links(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info(f"Generate batch links button pressed by {update.effective_user.id}")
    await update.callback_query.answer("‡§≤‡§ø‡§Ç‡§ï ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å...") # ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§´‡•Ä‡§°‡§¨‡•à‡§ï ‡§¶‡•á‡§Ç
    user_id = update.effective_user.id
    
    if user_id not in batch_files_in_progress or not batch_files_in_progress[user_id]:
        await update.callback_query.message.reply_text("‡§ï‡•ã‡§à ‡§´‡§º‡§æ‡§á‡§≤‡•á‡§Ç ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡§Ç ‡§ú‡§ø‡§®‡§ï‡•á ‡§≤‡§ø‡§è ‡§≤‡§ø‡§Ç‡§ï ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡•Ä ‡§ú‡§æ ‡§∏‡§ï‡•á‡§Ç‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡§π‡§≤‡•á ‡§´‡§º‡§æ‡§á‡§≤‡•á‡§Ç ‡§≠‡•á‡§ú‡•á‡§Ç‡•§")
        logger.warning(f"Generate batch links pressed but no files in progress for user {user_id}")
        return ConversationHandler.END # ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§ñ‡§§‡•ç‡§Æ ‡§ï‡§∞‡•á‡§Ç
    
    links_text = "‡§Ø‡§π‡§æ‡§Å ‡§Ü‡§™‡§ï‡•Ä ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§≤‡§ø‡§Ç‡§ï‡•ç‡§∏ ‡§π‡•à‡§Ç:\n\n"
    
    for token in batch_files_in_progress[user_id]:
        external_api_link = f"{EXTERNAL_API_BASE_URL}?return_to_bot={token}"
        
        # ‡§°‡§ø‡§∏‡•ç‡§™‡•ç‡§≤‡•á ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§Æ‡•á‡§Ç ‡§ü‡•ã‡§ï‡§® ‡§ï‡•á ‡§™‡§π‡§≤‡•á 8 ‡§ï‡•à‡§∞‡•á‡§ï‡•ç‡§ü‡§∞ ‡§ï‡•ã ‡§è‡§∏‡•ç‡§ï‡•á‡§™ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ "..." ‡§ï‡•ã ‡§≠‡•Ä
        display_text = escape_markdown_v2(token[:8]) + escape_markdown_v2("...")
        
        # Markdown V2 ‡§≤‡§ø‡§Ç‡§ï ‡§´‡§º‡•â‡§∞‡•ç‡§Æ‡•á‡§ü: [text](<url>) - URL ‡§ï‡•ã <> ‡§∏‡•á ‡§ò‡•á‡§∞‡§®‡§æ ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç
        links_text += f"üëâ [{display_text}](<{external_api_link}>)\n"
    
    try:
        await update.callback_query.message.reply_text(
            links_text, 
            parse_mode='MarkdownV2', 
            disable_web_page_preview=True # ‡§§‡§æ‡§ï‡§ø Telegram ‡§≤‡§ø‡§Ç‡§ï ‡§ï‡§æ ‡§™‡•ç‡§∞‡•Ä‡§µ‡•ç‡§Ø‡•Ç ‡§® ‡§¨‡§®‡§æ‡§è
        )
        logger.info(f"Batch links sent to user {user_id}")
    except telegram.error.BadRequest as e:
        logger.error(f"Error sending MarkdownV2 batch links to user {user_id}: {e}")
        # ‡§Ø‡§¶‡§ø ‡§Ö‡§≠‡•Ä ‡§≠‡•Ä ‡§ï‡•ã‡§à ‡§™‡§æ‡§∞‡•ç‡§∏‡§ø‡§Ç‡§ó ‡§è‡§∞‡§∞ ‡§Ü‡§§‡•Ä ‡§π‡•à, ‡§§‡•ã ‡§¨‡§ø‡§®‡§æ Markdown ‡§ï‡•á ‡§≠‡•á‡§ú‡•á‡§Ç
        fallback_links_text = "‡§≤‡§ø‡§Ç‡§ï ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à‡•§ ‡§Ø‡§π‡§æ‡§Å ‡§∞‡•â ‡§≤‡§ø‡§Ç‡§ï‡•ç‡§∏ ‡§π‡•à‡§Ç (‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡•à‡§®‡•ç‡§Ø‡•Å‡§Ö‡§≤ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§ï‡•â‡§™‡•Ä ‡§ï‡§∞‡•á‡§Ç):\n\n" + \
                              "\n".join([f"üëâ {EXTERNAL_API_BASE_URL}?return_to_bot={t}" 
                                         for t in batch_files_in_progress[user_id]])
        await update.callback_query.message.reply_text(fallback_links_text)
    
    del batch_files_in_progress[user_id] # ‡§¨‡•à‡§ö ‡§ï‡•ç‡§≤‡§ø‡§Ø‡§∞ ‡§ï‡§∞‡•á‡§Ç
    context.user_data.pop('current_mode', None) # ‡§Æ‡•ã‡§° ‡§ï‡•ç‡§≤‡§ø‡§Ø‡§∞ ‡§ï‡§∞‡•á‡§Ç
    return ConversationHandler.END # ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§ñ‡§§‡•ç‡§Æ ‡§ï‡§∞‡•á‡§Ç

async def cancel_batch(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info(f"Batch cancelled by {update.effective_user.id}")
    user_id = update.effective_user.id
    if user_id in batch_files_in_progress:
        del batch_files_in_progress[user_id]
        logger.info(f"Cleared batch in progress for user {user_id}.")
    context.user_data.pop('current_mode', None)
    
    # ‡§Ø‡§¶‡§ø ‡§ï‡•â‡§≤‡§¨‡•à‡§ï ‡§ï‡•ç‡§µ‡•á‡§∞‡•Ä ‡§∏‡•á ‡§Ü‡§Ø‡§æ ‡§π‡•à (‡§ú‡•à‡§∏‡•á ‡§¨‡§ü‡§® ‡§∏‡•á)
    if update.callback_query:
        await update.callback_query.answer("‡§¨‡•à‡§ö ‡§ú‡§®‡§∞‡•á‡§∂‡§® ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§")
        await update.callback_query.message.reply_text(
            "‡§¨‡•à‡§ö ‡§´‡§º‡§æ‡§á‡§≤ ‡§ú‡§®‡§∞‡•á‡§∂‡§® ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§"
        )
    else: # ‡§Ø‡§¶‡§ø ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§∏‡•á ‡§Ü‡§Ø‡§æ ‡§π‡•à (/cancel)
        await update.message.reply_text(
            "‡§¨‡•à‡§ö ‡§´‡§º‡§æ‡§á‡§≤ ‡§ú‡§®‡§∞‡•á‡§∂‡§® ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§"
        )
    
    return ConversationHandler.END


# --- General File Handler (for /link command or fallback) ---
async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ‡§Ø‡§¶‡§ø ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§¨‡•à‡§ö ‡§Æ‡•ã‡§° ‡§Æ‡•á‡§Ç ‡§π‡•à, ‡§§‡•ã ‡§¨‡•à‡§ö ‡§π‡•à‡§Ç‡§°‡§≤‡§∞ ‡§ï‡•ã ‡§≠‡•á‡§ú‡•á‡§Ç
    if context.user_data.get('current_mode') == 'batch_file':
        logger.info(f"File received in batch mode from {update.effective_user.id}. Passing to batch handler.")
        return await handle_batch_file_received(update, context)

    logger.info(f"Single file received from {update.effective_user.id}")
    file = None
    file_type = ""
    if update.message.document:
        file = update.message.document
        file_type = "document"
    elif update.message.video:
        file = update.message.video
        file_type = "video"
    else:
        logger.info(f"Unsupported file type received from {update.effective_user.id} in single mode.")
        await update.message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§°‡•â‡§ï‡•ç‡§Ø‡•Ç‡§Æ‡•á‡§Ç‡§ü ‡§Ø‡§æ ‡§è‡§ï ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§≠‡•á‡§ú‡•á‡§Ç‡•§")
        return

    original_filename = file.file_name if file.file_name else f"unnamed_{file_type}"
    user_chat_id = update.message.chat_id

    try:
        sent_message = await context.bot.forward_message(
            chat_id=PUBLIC_CHANNEL_ID,
            from_chat_id=user_chat_id,
            message_id=update.message.message_id
        )
        permanent_telegram_file_id = None
        if sent_message.document:
            permanent_telegram_file_id = sent_message.document.file_id
        elif sent_message.video:
            permanent_telegram_file_id = sent_message.video.file_id
        
        if not permanent_telegram_file_id:
            logger.error(f"Failed to get file ID from forwarded message for single file {original_filename}")
            await update.message.reply_text("‡§´‡§º‡•â‡§∞‡§µ‡§∞‡•ç‡§°‡•á‡§° ‡§Æ‡•à‡§∏‡•á‡§ú ‡§∏‡•á ‡§´‡§º‡§æ‡§á‡§≤ ID ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤‡•§")
            return

    except Exception as e:
        logger.error(f"Error forwarding single file {original_filename} to storage channel: {e}")
        await update.message.reply_text(f"‡§∏‡•ç‡§ü‡•ã‡§∞‡•á‡§ú ‡§ö‡•à‡§®‡§≤ ‡§™‡§∞ ‡§´‡§º‡§æ‡§á‡§≤ ‡§´‡§º‡•â‡§∞‡§µ‡§∞‡•ç‡§° ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {e}")
        return

    unique_token = str(uuid.uuid4())

    file_info = {
        "token": unique_token,
        "telegram_file_id": permanent_telegram_file_id,
        "original_filename": original_filename,
        "user_chat_id": user_chat_id,
        "upload_time": datetime.datetime.now(),
        "file_type": file_type
    }
    files_collection.insert_one(file_info)
    logger.info(f"Single file {original_filename} (token: {unique_token}) saved to MongoDB.")

    external_api_link = f"{EXTERNAL_API_BASE_URL}?return_to_bot={unique_token}"
    
    keyboard = [
        [InlineKeyboardButton("‡§´‡§º‡§æ‡§á‡§≤ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç", url=external_api_link)],
        [InlineKeyboardButton("‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡•à‡§∏‡•á ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç", url="https://google.com")] # <-- ‡§á‡§∏ URL ‡§ï‡•ã ‡§Ö‡§™‡§®‡•Ä ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§Æ‡§¶‡§¶ ‡§™‡•á‡§ú ‡§≤‡§ø‡§Ç‡§ï ‡§∏‡•á ‡§¨‡§¶‡§≤‡•á‡§Ç!
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "‡§Ü‡§™‡§ï‡•Ä ‡§´‡§º‡§æ‡§á‡§≤ ‡§∏‡§π‡•á‡§ú‡•Ä ‡§ó‡§à ‡§π‡•à! ‡§Ü‡§ó‡•á ‡§¨‡§¢‡§º‡§®‡•á ‡§î‡§∞ ‡§è‡§ï ‡§õ‡•ã‡§ü‡§æ ‡§∏‡§æ ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§™‡•Ç‡§∞‡§æ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è '‡§´‡§º‡§æ‡§á‡§≤ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç' ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç:",
        reply_markup=reply_markup
    )
    context.user_data.pop('current_mode', None) # ‡§∏‡§ø‡§Ç‡§ó‡§≤ ‡§´‡§º‡§æ‡§á‡§≤ ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§Æ‡•ã‡§° ‡§ï‡•ç‡§≤‡§ø‡§Ø‡§∞ ‡§ï‡§∞‡•á‡§Ç


def main() -> None:
    # ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§∏‡§≠‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§™‡§∞‡•ç‡§Ø‡§æ‡§µ‡§∞‡§£ ‡§ö‡§∞ ‡§∏‡•á‡§ü ‡§π‡•à‡§Ç
    required_env_vars = ["TELEGRAM_BOT_TOKEN", "MONGO_URI", "PUBLIC_CHANNEL_USERNAME", "PUBLIC_CHANNEL_ID", "EXTERNAL_API_BASE_URL"]
    for var in required_env_vars:
        if not os.getenv(var):
            logger.error(f"‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§™‡§∞‡•ç‡§Ø‡§æ‡§µ‡§∞‡§£ ‡§ö‡§∞ '{var}' ‡§ó‡§æ‡§Ø‡§¨ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§á‡§∏‡•á ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§")
            exit(1) # ‡§Ø‡§¶‡§ø ‡§ï‡•ã‡§à ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ö‡§∞ ‡§ó‡§æ‡§Ø‡§¨ ‡§π‡•à ‡§§‡•ã ‡§¨‡§æ‡§π‡§∞ ‡§®‡§ø‡§ï‡§≤‡•á‡§Ç

    # Flask ‡§ê‡§™ ‡§ï‡•ã ‡§è‡§ï ‡§Ö‡§≤‡§ó ‡§•‡•ç‡§∞‡•á‡§° ‡§Æ‡•á‡§Ç ‡§ö‡§≤‡§æ‡§è‡§Ç
    threading.Thread(target=run_flask_app).start()

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # --- ‡§π‡•à‡§Ç‡§°‡§≤‡§∞ ---
    application.add_handler(CommandHandler("start", start))
    
    # ‡§ï‡•â‡§≤‡§¨‡•à‡§ï ‡§ï‡•ç‡§µ‡•á‡§∞‡•Ä ‡§π‡•à‡§Ç‡§°‡§≤‡§∞
    application.add_handler(CallbackQueryHandler(help_command, pattern="^help_command$"))
    application.add_handler(CallbackQueryHandler(back_to_welcome, pattern="^back_to_welcome$"))

    # ‡§∏‡§ø‡§Ç‡§ó‡§≤ ‡§´‡§º‡§æ‡§á‡§≤ ‡§≤‡§ø‡§Ç‡§ï ‡§ú‡§®‡§∞‡•á‡§∂‡§®
    application.add_handler(CommandHandler("link", link_command))

    # ‡§¨‡•à‡§ö ‡§´‡§º‡§æ‡§á‡§≤ ‡§≤‡§ø‡§Ç‡§ï ‡§ú‡§®‡§∞‡•á‡§∂‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ConversationHandler
    batch_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("batch", batch_start)], # /batch ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§∏‡•á ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç
        states={
            SENDING_BATCH_FILES: [
                MessageHandler(filters.ATTACHMENT, handle_batch_file_received), # ‡§Ö‡§ü‡•à‡§ö‡§Æ‡•á‡§Ç‡§ü (‡§´‡§º‡§æ‡§á‡§≤‡•á‡§Ç) ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡•á‡§Ç
                CallbackQueryHandler(generate_batch_links, pattern="^generate_batch_links$"), # "‡§≤‡§ø‡§Ç‡§ï ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç" ‡§¨‡§ü‡§®
                CallbackQueryHandler(cancel_batch, pattern="^cancel_batch_generation$"), # "‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç" ‡§¨‡§ü‡§®
                CommandHandler("cancel", cancel_batch) # /cancel ‡§ï‡§Æ‡§æ‡§Ç‡§°
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel_batch), CallbackQueryHandler(cancel_batch, pattern="^cancel_batch_generation$")], # ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§∏‡•á ‡§¨‡§æ‡§π‡§∞ ‡§®‡§ø‡§ï‡§≤‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§´‡§º‡•â‡§≤‡§¨‡•à‡§ï
    )
    application.add_handler(batch_conv_handler)

    # ‡§∏‡§≠‡•Ä ‡§Ö‡§ü‡•à‡§ö‡§Æ‡•á‡§Ç‡§ü (‡§°‡•â‡§ï‡•ç‡§Ø‡•Ç‡§Æ‡•á‡§Ç‡§ü/‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã) ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§π‡•à‡§Ç‡§°‡§≤‡§∞ (‡§ú‡•ã ‡§ï‡§ø‡§∏‡•Ä ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§Æ‡•ã‡§° ‡§Æ‡•á‡§Ç ‡§® ‡§π‡•ã‡§Ç)
    application.add_handler(MessageHandler(filters.ATTACHMENT, handle_file))

    logger.info("‡§¨‡•â‡§ü ‡§ö‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à...")
    # Telegram ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§™‡•ã‡§≤‡§ø‡§Ç‡§ó ‡§Æ‡•ã‡§° ‡§Æ‡•á‡§Ç ‡§ö‡§≤‡§æ‡§è‡§Ç
    # allowed_updates=Update.ALL_TYPES ‡§ï‡•ã ‡§π‡§ü‡§æ‡§®‡§æ ‡§Ö‡§ï‡•ç‡§∏‡§∞ Conflict ‡§è‡§∞‡§∞ ‡§ï‡•ã ‡§ï‡§Æ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à
    application.run_polling() 

if __name__ == "__main__":
    main()
